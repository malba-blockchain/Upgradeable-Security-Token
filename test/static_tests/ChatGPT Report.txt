Line: 515

    Impact: Critical
    Detail: Possible re-entrancy vulnerability in investFromMatic(). The contract transfers MATIC to treasuryAddress without checking its effect before transferring HYAX tokens to msg.sender. This allows an attacker to re-enter by calling back the function before completing all updates, enabling potential fund draining.
ANSWER: False positive. It's checked using a require() statement.

Line: 573

    Impact: Medium
    Detail: Unchecked call return value for token.transferFrom(). Failure of token transfer might go undetected, allowing the function to proceed even if tokens are not received by the contract. This can lead to incorrect balances and expose the contract to unexpected behavior.
ANSWER: False positive. It's checked using a require() statement.

Line: 616

    Impact: High
    Detail: Integer overflow risk in _amount parameter of tokenIssuance. Although Solidity 0.8+ includes overflow protection, confirming this could prevent excessive minting by owner if future versions or inherited contracts bypass overflow checks.
ANSWER: False positive. The parameter is uint256 and it has double check of the parameter value in the function


Line: 655

    Impact: Medium
    Detail: Lack of front-running protection in validateMaximumInvestedAmountAndInvestorLimit(). This validation function is vulnerable to front-running as any transaction setting totalInvestmentInUsd can be delayed or front-run by another, causing undesired states for maximumInvestmentAllowedInUSD.
ANSWER: False positive. Validating the maximum invested amount doesn't pose any front run risk.

Line: 784

    Impact: Medium
    Detail: Short address attack vulnerability. Lack of explicit length checking for _investorAddress and newPriceFeedAddress parameters may expose functions to short address attacks, particularly in updatePriceFeedAddress().
ANSWER: False positive. This can only be executed by the owner AND the function does and extended validation to verify the nature of the address.

Line: 521

    Impact: High
    Detail: Lack of Insecure Access Control for treasury updates in updateTreasuryAddress. Only onlyOwner is used, potentially leaving the contract vulnerable if the owner's private key is compromised or mismanaged.
ANSWER: False positive. It's true, that it has the onlyOwner requirement, but the owner is implemented as a multisig before the smart contract officially receives money.

Line: 745

    Impact: Critical
    Detail: Delegatecall injection vulnerability in getCurrentTokenPrice(). dataFeed.latestRoundData() is directly called on external oracles, without rigorous verification of response data. This makes the contract vulnerable to malicious or malfunctioning oracles.
ANSWER: Valid vulnerability. Just added validations to ensure its the right oracle.

Line: 805

    Impact: Low
    Detail: Timestamp dependence in getCurrentTokenPrice(). The function retrieves token prices based on latest data but does not include logic to verify price freshness.
ANSWER: Valid vulnerability. Just added validations to ensure the price freshness. But commented them because there is need to deploy local tests with frozen prices. Will enable it before testnet deployment.


Line: 656

    Impact: Critical
    Detail: Unrestricted Ether Withdrawal vulnerability in investFromMatic(). ETH (MATIC) is sent to treasuryAddress without ensuring that it cannot be redirected or withdrawn maliciously. An attacker could target the treasuryAddress, resulting in loss of ETH.
ANSWER: The treasury address is a multisig wallet, and the address is set up in the contract constructor/initialization. The team decided to directly send the balance to the treasury address directly in order to decrease attack surface.

Line: 745

    Impact: High
    Detail: Oracle Manipulation in getCurrentTokenPrice(). The function depends on external oracles, which could be manipulated. Price feeds are not validated thoroughly, making the contract susceptible to oracle price manipulation, affecting token pricing.
ANSWER: To validate. Adding the price validation could be the right approach but would like to get external opinions because it would increase the code complexity.

Line: 516

    Impact: Medium
    Detail: Unchecked External Calls. The contract uses payable(treasuryAddress).send(msg.value) to send MATIC, but no checks ensure successful completion. A failed transfer would leave the contract in an inconsistent state.
ANSWER: Changed send() to transfer(), having into account that the treasury address is a gnosis multisig wallet.


Line: 578

    Impact: Medium
    Detail: Unchecked Return Data from external call token.transferFrom. Failure of this token transfer could cause an unexpected balance discrepancy, leading to possible incorrect fund transfers or state inconsistencies.
ANSWER: Added the SafeERC20 library to safely handle the transfer.

Line: 803

    Impact: Medium
    Detail: Insufficient Gas Griefing in the getCurrentTokenPrice() function. This function's reliance on external oracles may lead to potential issues if oracle updates consume excessive gas, impacting transaction completion.
Answer: False positive. The only function that consults the oracle: latestRoundData, is a read function, therefore there is not gas consumption at all.

CONTINUE HEREEEEEEEEEEEEE

Line: 655

    Impact: High
    Detail: Race Condition risk in validateMaximumInvestedAmountAndInvestorLimit(). This function's reliance on totalInvestmentInUsd can be manipulated if transactions are reordered or delayed, creating inconsistencies in maximum investment tracking.
Answer: Turned the function into validateAndTrackInvestment() to validate and update the status of the amount of investments to avoid the manipultation risk.

Line: 705

    Impact: Medium
    Detail: Logic Error in updateMaximumInvestmentAllowedInUSD(). If maximumInvestmentAllowedInUSD is set incorrectly due to transaction race conditions or improper input validation, investment limits could be unintentionally exceeded or restricted, affecting investor access.
Answer: False positive. Due to contract logic this function can only be executed by the owner which is a multisign. Even if breached it doesn't pose a major risk to increase the maximum investment allowed in USD.

Line: 656

    Impact: Critical
    Detail: Reentrancy Guard Bypass in investFromMatic(). Although nonReentrant is applied, transferring MATIC before completing all state updates could allow an attacker to re-enter the contract by manipulating the fallback function, potentially bypassing the reentrancy guard and draining funds.
Answer: False positive. Due to the contract logic: 1. The priority is to guarantee that the funds go to the treasury wallet in a safe way, BEFORE sending any token from the smart contract. 2. The treasury wallet is a multisign property of the team. 

Line: 734

    Impact: High
    Detail: Storage Collision risk in investorData mapping. As the contract includes multiple struct mappings, there’s a potential storage collision in the investorData mapping if additional storage is introduced, risking data overwrites and undefined behavior.
Answer: Added the storage padding uint256[50] private __gap; at the end of the varaibles declaration.

CONTINUE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

Line: 672

    Impact: Medium
    Detail: Improper Error Handling in getCurrentTokenPrice(). If an oracle’s latestRoundData() function returns an error, the contract may revert unexpectedly. Without catching and handling these errors more gracefully, any disruption in the oracle could disrupt the contract.

Line: 712

    Impact: Medium
    Detail: Approval Vulnerabilities in tokenIssuance(). The function allows unrestricted token issuance by the owner, which could lead to potential abuse if the owner’s account is compromised. Adding specific limits or multi-signature requirements would mitigate this risk.

Line: 819

    Impact: High
    Detail: Unchecked Low-Level Calls in updatePriceFeedAddress(). The function depends on oracle description matching, but using try/catch without additional validation can lead to unexpected states if the call fails silently, potentially misconfiguring the contract's oracle feeds.

Line: 588

    Impact: Medium
    Detail: Ambiguous Evaluation Order in validateMaximumInvestedAmountAndInvestorLimit(). Adding _totalInvestmentInUsd and investorData[_investorAddress].totalUsdDepositedByInvestor without confirming consistent ordering can lead to race conditions, potentially skewing investment limits.

Line: 670

    Impact: High
    Detail: Unexpected Ether Transfers (Force Feeding). As the contract can receive MATIC, it is susceptible to forced MATIC transfers. This may result in unaccounted balances, complicating fund management.


Line: 164

    Impact: Medium
    Detail: Gas optimization could be achieved by using calldata instead of memory for the _investorAddress parameter in addToWhiteList. Calldata is more gas efficient for external calls, especially if the function is frequently used.

Line: 289

    Impact: Medium
    Detail: Suggestion for best practice in tokenIssuance(). Currently, onlyOwner restricts access, but adding a multi-signature requirement could increase security, especially in case the owner’s private key is compromised. This approach is standard in critical token issuance functions.

Line: 515

    Impact: Medium
    Detail: Gas optimization in investFromMatic(). Instead of calling this.getCurrentTokenPrice(TokenType.MATIC), consider storing the current price once per transaction or regularly updating it in a state variable. This reduces unnecessary function calls and saves gas.

Line: 620

    Impact: Low
    Detail: Gas optimization by reducing storage reads in validateMaximumInvestedAmountAndInvestorLimit(). Instead of reading investorData[_investorAddress].totalUsdDepositedByInvestor multiple times, store it in a local variable to avoid additional storage reads, optimizing gas usage.

Line: 805

    Impact: High
    Detail: Suggestion for best practice in getCurrentTokenPrice(). Add a time-staleness check for oracle data to ensure the returned price is fresh. This is crucial for price-sensitive applications to avoid acting on outdated or manipulated price data.

Line: 435

    Impact: Medium
    Detail: Gas optimization in calculateTotalHyaxTokenToReturn(). Use unchecked {} for the multiplication and division operations on _amount * _currentCryptocurrencyPrice / 10**8 as Solidity 0.8+ already includes overflow checks by default, but these checks can be skipped if the values are controlled, saving gas.

Line: 590

    Impact: Medium
    Detail: Suggestion for best practice by adding indexed parameters to events such as TokenIssuance, InvestFromMatic, and InvestFromCryptoToken events. This will allow more efficient filtering of these events in off-chain applications, improving log querying and traceability.
