Vulnerability 1: Potential Reentrancy in investFromMatic

Line: 1135-1144
Impact: High
Detail:
The investFromMatic function transfers MATIC to the treasury address and then transfers HYAX tokens to the investor. If the treasury contract is malicious or vulnerable to reentrancy, it could potentially re-enter the investFromMatic function before the state is fully updated, leading to incorrect token balances and potential loss of funds.

Mitigation:

    Use a ReentrancyGuard: Implement a reentrancy guard pattern to prevent reentrant calls.
    Atomic Operations: Consider using a library like OpenZeppelin's SafeERC20 to ensure atomic token transfers and state updates.

Answer: Kept the transactional order. Implemented reentracy guard and the SafeERC20 library.



Vulnerability 2: Unchecked Return Values in investFromCryptoToken

Line: 1174-1175, 1179-1180, 1184-1185
Impact: Medium

    Detail: The investFromCryptoToken function transfers tokens using the transferFrom function without checking the return value. If the transfer fails, the contract's state might be inconsistent, leading to potential loss of funds.

Mitigation:

    Check Return Values: Always check the return values of external calls to ensure that operations are successful.

Answer: The return values of the transactions are checked using a require() and the token transfers are made using de SafeERC20 library.


Vulnerability 3: Potential Integer Overflow/Underflow

Line: Various arithmetic operations
Impact: High

    Detail: Integer overflow and underflow vulnerabilities can occur in various arithmetic operations, especially when dealing with large numbers or unexpected inputs. This can lead to incorrect calculations, unexpected behavior, and potential loss of funds.

Mitigation:

    Use SafeMath Library: Use a SafeMath library to perform safe arithmetic operations.
    Input Validation: Validate input values to prevent invalid inputs that could lead to overflow or underflow.

Answer: The usage of SafeMath is directly implemented in the solidity versions >0.8.0. This version is 0.8.20


Vulnerability 4: Access Control Weaknesses

Line: Various access control modifiers
Impact: Medium

    Detail: While the onlyOwnerOrWhitelister modifier is used to restrict access to sensitive functions, it's important to ensure that the whitelister role is granted to trusted addresses. Weak access control can lead to unauthorized actions and potential loss of funds.

Answer: The storage of whitelister address will be made via secure storage using AWS architecture and the functionalities it can use are restricted to update investor status and data.

Vulnerability 2: Potential Race Conditions in Investment Functions

Line: 1135-1144, 1174-1185
Impact: Medium
Detail:
Race conditions can occur in the investFromMatic and investFromCryptoToken functions if multiple transactions are processed simultaneously. This could lead to incorrect token balances and potential loss of funds.

Mitigation:

    Atomic Operations: Use atomic operations to ensure that state changes are executed as a single, indivisible unit.
    Careful State Updates: Update the contract's state before making external calls to prevent reentrancy attacks and race conditions.

Answer: This recommendation is not aligned with the security business requirements of sending the funds to the treasury wallet BEFORE updating the smart contract state or emiting events.



Vulnerability 3: Oracle Manipulation

Line: 1292-1310
Impact: High

    Detail: The contract relies on external price feeds to determine the value of different tokens. If the price feeds are manipulated or compromised, it could lead to incorrect calculations and potential loss of funds.

Mitigation:

    Multiple Oracle Sources: Consider using multiple oracle sources to reduce the risk of manipulation.
    Oracle Reputation: Use reputable and well-established oracle providers.
    Price Verification: Implement mechanisms to verify the accuracy of the prices provided by the oracle.

Answer: Chainlink price feed oracles are used. Added checks to validate: price answer, timeStamp, answeredInRound, roundID, and price freshness.



Vulnerability 4: Logic Errors

Line: Various
Impact: Varies

    Detail: Logic errors can arise from incorrect assumptions, unintended side effects, or faulty algorithms. These errors can lead to unexpected behavior, security vulnerabilities, and financial losses.

Mitigation:

    Thorough Code Review: Conduct a thorough code review to identify and fix logic errors.
    Unit Testing: Write comprehensive unit tests to cover all code paths and edge cases.
    Formal Verification: Consider using formal verification techniques to prove the correctness of the contract's logic.

Answer: Currently undergoing through this testing.


Vulnerability 2: Unchecked Return Values in investFromCryptoToken

Lines: 1174-1175, 1179-1180, 1184-1185
Impact: Medium
Detail:
The investFromCryptoToken function transfers tokens using the transferFrom function without checking the return value. If the transfer fails, the contract's state might be inconsistent, leading to potential loss of funds.

Mitigation:

    Check Return Values: Always check the return values of external calls to ensure that operations are successful.

Answer: False positive. The function uses a require() in order to check those the return value and uses SafeERC20 to execute the transfer.

Improvement Point 1: Gas Optimization in investFromMatic and investFromCryptoToken

Lines: 1135-1144, 1174-1185
Impact: Medium
Detail:
The investFromMatic and investFromCryptoToken functions can be optimized by reducing the number of external calls and state updates. Consider combining multiple operations into a single transaction to save gas.

Improvement:

    Batch Transfers: Use batch transfer functions provided by token contracts (if available) to transfer multiple tokens in a single transaction.
    Optimize State Updates: Combine multiple state updates into a single operation to reduce gas costs.

Answer: This recommendation goes against basic security measures to guarantee the right execution of operations. Not implemented.

Improvement Point 2: Consider Using a Library for Token Interactions

Impact: Medium
Detail:
Using a library like OpenZeppelin's SafeERC20 can simplify token interactions and improve code readability and security.

Improvement:

    Integrate SafeERC20: Incorporate the SafeERC20 library to handle token transfers and approvals safely and efficiently.

Answer: SafeERC20 has been implemented.

Improvement Point 3: Improve Error Handling and Logging

Impact: Medium
Detail:
Enhance error handling and logging to provide more informative error messages and debugging information.

Improvement:

    Custom Error Messages: Define custom error messages to provide more specific information about errors.
    Detailed Logging: Log important events and errors to facilitate debugging and troubleshooting.

Answer: Added custom errors in the require() statements and emited events to every function that updates the smart contract state.


Improvement Point 4: Consider Using a Decentralized Oracle Network

Impact: High
Detail:
Relying on a single centralized oracle can introduce a single point of failure. Consider using a decentralized oracle network to improve the reliability and security of price feeds.

Improvement:

    Integrate Decentralized Oracle Network: Explore integrating a decentralized oracle network like Chainlink to obtain reliable and tamper-resistant price feeds.

Answer: The chainlink network is used.

Improvement Point 5: Security Best Practices

    Regular Security Audits: Conduct regular security audits to identify and address potential vulnerabilities.
    Formal Verification: Consider using formal verification techniques to prove the correctness of the contract's logic.
    Stay Updated with Security Best Practices: Keep up-to-date with the latest security best practices and vulnerabilities in the Solidity ecosystem.
    Consider Using a Security-Focused Framework: Use a security-focused framework like OpenZeppelin to leverage battle-tested security patterns and libraries.

Answer: Currently executing the security audit, using OpenZeppelin frameworks and preparing for a security audit via 3rd party.